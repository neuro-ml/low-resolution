import numpy as np
import torch

from lowres.model.mobilenetv2unet3d.mobilenetv2unet3d import MobileNetV2UNet3D
from dpipe.predict.shape import divisible_shape, add_extract_dims, patches_grid
from dpipe.torch import inference_step

# parameters for batch_iter:
x_patch_size = y_patch_size = [64] * 3
batch_size = 12

# MODEL
architecture = MobileNetV2UNet3D(n_chans_in=n_chans_in, n_chans_out=n_chans_out)

# PREDICT
patch_size = np.array([128] * 3)
patch_stride = np.array([120] * 3)


@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[8] * 3, padding_values=np.min)
def predict(x):
    return inference_step(x, architecture=architecture, activation=torch.sigmoid)


@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[8] * 3, padding_values=np.min)
def predict_logit(x):
    return inference_step(x, architecture=architecture)
