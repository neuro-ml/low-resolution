import numpy as np
import torch

from dpipe.medim.shape_ops import pad
from dpipe.predict.shape import divisible_shape, add_extract_dims, patches_grid
from dpipe.predict.functional import preprocess
from dpipe.torch.model import inference_step
from lowres.model.deepmedic39 import get_dm39

# parameters for batch_iter
x_patch_size = [87, 87, 87]
y_patch_size = [39, 39, 39]
batch_size = 12
nonzero_fraction = 0.25

# MODEL
architecture = get_dm39(n_chans_in=n_chans_in, n_chans_out=n_chans_out)

# PREDICT
patch_size = np.array([90] * 3)
patch_stride = np.array([75] * 3)


@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[3] * 3, padding_values=np.min)
@preprocess(pad, padding=[[24] * 2] * 3, padding_values=np.min)
def predict(x):
    return inference_step(x, architecture=architecture, activation=torch.sigmoid)


@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[3] * 3, padding_values=np.min)
@preprocess(pad, padding=[[24] * 2] * 3, padding_values=np.min)
def predict_logit(x):
    return inference_step(x, architecture=architecture)
