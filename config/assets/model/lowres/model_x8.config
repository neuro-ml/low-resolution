from functools import partial

import torch
import numpy as np

from lowres.model.lowres.modelx8 import ModelX8, SCALE_FACTOR
from lowres.batch_iter import SPATIAL_DIMS
from lowres.cv import interpolate_np
from dpipe.torch import inference_step
from dpipe.torch.functional import weighted_cross_entropy_with_logits
from dpipe.predict.functional import postprocess
from dpipe.predict.shape import divisible_shape, add_extract_dims, patches_grid

# parameters for batch_iter:
x_patch_size = y_patch_size = np.array([64] * 3)
patch_size = np.array([216] * 3)
patch_stride = np.array([200] * 3)
batch_size = 32

# MODEL:
scale_factor = SCALE_FACTOR
n_features = 16
architecture = ModelX8(n_chans_in=n_chans_in, n_chans_out=n_chans_out, n_features=n_features)

criterion = partial(weighted_cross_entropy_with_logits, adaptive=True)


# PREDICT:
@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[scale_factor] * 3, padding_values=np.min)
@postprocess(interpolate_np, scale_factor=scale_factor, axes=SPATIAL_DIMS)
def predict(x):
    return inference_step(x, architecture=architecture, activation=torch.sigmoid)


@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[scale_factor] * 3, padding_values=np.min)
@postprocess(interpolate_np, scale_factor=scale_factor, axes=SPATIAL_DIMS)
def predict_logit(x):
    return inference_step(x, architecture=architecture)
