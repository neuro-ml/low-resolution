from functools import partial

import numpy as np
import torch
import torch.nn as nn

from dpipe.torch.functional import weighted_cross_entropy_with_logits
from dpipe.predict.shape import divisible_shape, add_extract_dims, patches_grid

from lowres.torch.functional import dice_loss_with_logits
from lowres.torch.model import train_step_lowres, inference_step_lowres
from lowres.torch.torch_utils import freeze_model
from lowres.model.lowres.lowres import LowRes
from lowres.model.lowres.modelx8 import ModelX8, SCALE_FACTOR

# architectures & losses:
x_patch_size = y_patch_size = np.array([64] * 3)
patch_size = np.array([216] * 3)
patch_stride = np.array([200] * 3)
batch_size = 16
n_features = 16
model_x8 = ModelX8(n_chans_in, n_chans_out, n_features=n_features)
model_lowres = LowRes(n_chans_in, n_chans_out, n_features=n_features)

criterion_x8 = partial(weighted_cross_entropy_with_logits, adaptive=True)
criterion_lowres = dice_loss_with_logits

# optimizer for both models:
architecture = nn.ModuleList((model_x8, model_lowres))

# lowres hyper-parameters:
scale_factor = SCALE_FACTOR
lr_init = 1e-3
nonzero_fraction = 0.9
lowres_margin = 1
lowres_alpha = 1.0
bbox_loss = False

# custom train step:
train_kwargs = dict(lr=lr_policy, optimizer=optimizer,
                    model_x8=model_x8, model_lowres=model_lowres, scale_factor=scale_factor,
                    criterion_x8=criterion_x8, criterion_lowres=criterion_lowres,
                    lowres_alpha=lowres_alpha, bbox_loss=bbox_loss, margin=lowres_margin)
train_step = train_step_lowres


# custom inference step:
@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[scale_factor] * 3, padding_values=np.min)
def predict(x):
    return inference_step_lowres(x, model_x8=model_x8, model_lowres=model_lowres, activation=torch.sigmoid,
                                 margin=lowres_margin)


@add_extract_dims()
@patches_grid(patch_size, patch_stride)
@divisible_shape(divisor=[scale_factor] * 3, padding_values=np.min)
def predict_logit(x):
    return inference_step_lowres(x, model_x8=model_x8, model_lowres=model_lowres, margin=lowres_margin)


# modify experiment sequence:
run_experiment = (
    fix_seed(seed=seed),
    lock_dir(),

    load_model_state(model_x8, path=path_to_pretrained_model_x8),
    architecture.to(device),
    freeze_model(model_x8),

    if_missing(lambda p: [train_model, save_model_state(architecture, p)], saved_model_path),
    load_model_state(architecture, saved_model_path),
    if_missing(predict_logits_to_dir, output_path=logit_predictions_path),
    if_missing(predict_to_dir, output_path=test_predictions_path),
    if_missing(command_evaluate_individual_metrics, results_path='test_metrics'),
)
