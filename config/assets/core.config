from functools import partial

import torch

import dpipe.commands as commands
from dpipe.config import Locker
from dpipe.layout import Flat
from dpipe.torch import save_model_state, load_model_state, train_step
from dpipe.train import train, TBLogger, TQDM, TimeProfiler, Checkpoints, Schedule
from dpipe.torch.functional import dice_loss_with_logits
from dpipe.train.validator import compute_metrics

from lowres.torch.model import train_step_with_x8


seed = 0xBadCafe

layout = Flat(split)
train_ids = layout.get_ids('train')
val_ids = layout.get_ids('val')
test_ids = layout.get_ids('test')

n_chans_in = 1
n_chans_out = 1

n_epochs = 100
batches_per_epoch = 100

lr_init = 1e-2
epoch2lr_dec_mul = {80: 0.1, }
lr_policy = Schedule(initial=lr_init, epoch2value_multiplier=epoch2lr_dec_mul)
policies = {}

device = 'cuda'

optimizer = torch.optim.SGD(
    architecture.parameters(),
    lr=lr_init,
    momentum=0.9,
    nesterov=True,
    weight_decay=0
)

load_x = dataset.image
load_y = dataset.lung_nodules_mask

validate = lambda: compute_metrics(predict, load_x, load_y, val_ids, val_metrics)

criterion = dice_loss_with_logits

# scale_factor = None
# train_step = partial(train_step_with_x8, scale_factor=scale_factor)

logger = TBLogger('logs')
checkpoints = Checkpoints('checkpoints', [architecture, optimizer])

train_step_args = [train_step, batch_iter, n_epochs, logger, checkpoints, validate]
train_step_kwargs = dict(scaler=torch.cuda.amp.GradScaler(), architecture=architecture,
                         optimizer=optimizer, criterion=criterion, lr=lr_policy)

training = train(*train_step_args, **train_step_kwargs, tqdm=TQDM(loss=True), time=TimeProfiler(logger.logger))

predict_to_dir = partial(commands.predict, ids=test_ids, load_x=load_x, predict_fn=predict)
predict_logits_to_dir = partial(commands.predict, ids=test_ids, load_x=load_x, predict_fn=predict_logit)

run_experiment = Locker().run(
    architecture.to(device),
    commands.populate('model.pth', lambda: [training, save_model_state(architecture, 'model.pth')]),
    load_model_state(architecture, 'model.pth'),
    commands.populate('test_logits', commands.predict, test_ids, 'test_predictions', load_x, predict_logit),
    commands.populate('test_predictions', commands.predict, test_ids, 'test_predictions', load_x, predict),
    commands.populate('test_metrics', commands.evaluate_individual_metrics, load_y, test_metrics, 'test_predictions',
                      'test_metrics')
)
